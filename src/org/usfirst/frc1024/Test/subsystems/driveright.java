// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1024.Test.subsystems;

import org.usfirst.frc1024.Test.Constants;
import org.usfirst.frc1024.Test.RobotMap;

import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.Talon;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class driveright extends Subsystem implements PIDSource, PIDOutput{

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public final static Talon right = RobotMap.drivetrainright;
    public final static Encoder rightEncoder = RobotMap.rightEncoder;
    public static PIDController pid;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    public driveright(){
    	pid = new PIDController(Constants.Rkp, Constants.Rki, Constants.Rkd, Constants.Rkf, this, this);
    	pid.setAbsoluteTolerance(1.0);
    	pid.setOutputRange(-1.0, 1.0);
    	
    	rightEncoder.setDistancePerPulse(0.0062831); // distance per pulse = pi/500
    }

	@Override
	public void pidWrite(double output) {
		right.set(output);
	}

	@Override
	public void setPIDSourceType(PIDSourceType pidSource) {
		
		
	}

	@Override
	public PIDSourceType getPIDSourceType() {
		return PIDSourceType.kDisplacement;
	}

	@Override
	public double pidGet() {
		return rightEncoder.getDistance();
	}
	
	public void dashboard(){
		SmartDashboard.putData("Right Drivetrain PID", pid);
		SmartDashboard.putNumber("Right Encoder", pidGet());
	}
}

